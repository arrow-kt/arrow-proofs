

package arrow.inject.compiler.plugin.runners;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link arrow.inject.compiler.plugin.GenerateTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("src/testData/diagnostics/context-receivers")
@TestDataPath("$PROJECT_ROOT")
public class DiagnosticTestGenerated extends AbstractDiagnosticTest {
    @Test
    @TestMetadata("a_polymorphic_provider_may_have_injection_arguments_which_are_polymorphically_resolved.kt")
    public void testA_polymorphic_provider_may_have_injection_arguments_which_are_polymorphically_resolved() throws Exception {
        runTest("src/testData/diagnostics/context-receivers/a_polymorphic_provider_may_have_injection_arguments_which_are_polymorphically_resolved.kt");
    }

    @Test
    public void testAllFilesPresentInContext_receivers() throws Exception {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("src/testData/diagnostics/context-receivers"), Pattern.compile("^(.+)\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("ambiguous_internal_and_public_given_proofs.kt")
    public void testAmbiguous_internal_and_public_given_proofs() throws Exception {
        runTest("src/testData/diagnostics/context-receivers/ambiguous_internal_and_public_given_proofs.kt");
    }

    @Test
    @TestMetadata("ambiguous_internal_orphans.kt")
    public void testAmbiguous_internal_orphans() throws Exception {
        runTest("src/testData/diagnostics/context-receivers/ambiguous_internal_orphans.kt");
    }

    @Test
    @TestMetadata("ambiguous_type_bounds_based_injection.kt")
    public void testAmbiguous_type_bounds_based_injection() throws Exception {
        runTest("src/testData/diagnostics/context-receivers/ambiguous_type_bounds_based_injection.kt");
    }

    @Test
    @TestMetadata("circular_proof_single_cycle_rule.kt")
    public void testCircular_proof_single_cycle_rule() throws Exception {
        runTest("src/testData/diagnostics/context-receivers/circular_proof_single_cycle_rule.kt");
    }

    @Test
    @TestMetadata("circular_proofs_cycle_rule.kt")
    public void testCircular_proofs_cycle_rule() throws Exception {
        runTest("src/testData/diagnostics/context-receivers/circular_proofs_cycle_rule.kt");
    }

    @Test
    @TestMetadata("context_receivers.kt")
    public void testContext_receivers() throws Exception {
        runTest("src/testData/diagnostics/context-receivers/context_receivers.kt");
    }

    @Test
    @TestMetadata("inductive.kt")
    public void testInductive() throws Exception {
        runTest("src/testData/diagnostics/context-receivers/inductive.kt");
    }

    @Test
    @TestMetadata("prohibited_public_proof_of_non_user_types.kt")
    public void testProhibited_public_proof_of_non_user_types() throws Exception {
        runTest("src/testData/diagnostics/context-receivers/prohibited_public_proof_of_non_user_types.kt");
    }

    @Test
    @TestMetadata("prohibited_public_proof_over_polymorphic_type_parameter.kt")
    public void testProhibited_public_proof_over_polymorphic_type_parameter() throws Exception {
        runTest("src/testData/diagnostics/context-receivers/prohibited_public_proof_over_polymorphic_type_parameter.kt");
    }

    @Test
    @TestMetadata("prohibited_published_internal_orphan.kt")
    public void testProhibited_published_internal_orphan() throws Exception {
        runTest("src/testData/diagnostics/context-receivers/prohibited_published_internal_orphan.kt");
    }

    @Test
    @TestMetadata("unresolved_given_callsite.kt")
    public void testUnresolved_given_callsite() throws Exception {
        runTest("src/testData/diagnostics/context-receivers/unresolved_given_callsite.kt");
    }

    @Test
    @TestMetadata("unresolved_given_callsite_inductive.kt")
    public void testUnresolved_given_callsite_inductive() throws Exception {
        runTest("src/testData/diagnostics/context-receivers/unresolved_given_callsite_inductive.kt");
    }
}
