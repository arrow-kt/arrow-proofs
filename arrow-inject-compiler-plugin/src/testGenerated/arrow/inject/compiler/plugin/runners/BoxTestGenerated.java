

package arrow.inject.compiler.plugin.runners;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link arrow.inject.compiler.plugin.GenerateTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("src/testData/box/context-receivers")
@TestDataPath("$PROJECT_ROOT")
public class BoxTestGenerated extends AbstractBoxTest {
    @Test
    @TestMetadata("a_polymorphic_provider_may_have_injection_arguments_which_are_polymorphically_resolved.kt")
    public void testA_polymorphic_provider_may_have_injection_arguments_which_are_polymorphically_resolved() throws Exception {
        runTest("src/testData/box/context-receivers/a_polymorphic_provider_may_have_injection_arguments_which_are_polymorphically_resolved.kt");
    }

    @Test
    public void testAllFilesPresentInContext_receivers() throws Exception {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("src/testData/box/context-receivers"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("context_receivers.kt")
    public void testContext_receivers() throws Exception {
        runTest("src/testData/box/context-receivers/context_receivers.kt");
    }

    @Test
    @TestMetadata("context_receivers_with_more_than_two_type_parameters.kt")
    public void testContext_receivers_with_more_than_two_type_parameters() throws Exception {
        runTest("src/testData/box/context-receivers/context_receivers_with_more_than_two_type_parameters.kt");
    }

    @Test
    @TestMetadata("context_receivers_with_two_type_parameters.kt")
    public void testContext_receivers_with_two_type_parameters() throws Exception {
        runTest("src/testData/box/context-receivers/context_receivers_with_two_type_parameters.kt");
    }

    @Test
    @TestMetadata("resolution_call_after_resolution.kt")
    public void testResolution_call_after_resolution() throws Exception {
        runTest("src/testData/box/context-receivers/resolution_call_after_resolution.kt");
    }

    @Test
    @TestMetadata("resolution_call_after_resolution_2.kt")
    public void testResolution_call_after_resolution_2() throws Exception {
        runTest("src/testData/box/context-receivers/resolution_call_after_resolution_2.kt");
    }

    @Test
    @TestMetadata("resolution_override_arguments.kt")
    public void testResolution_override_arguments() throws Exception {
        runTest("src/testData/box/context-receivers/resolution_override_arguments.kt");
    }

    @Test
    @TestMetadata("resolution_override_arguments_2.kt")
    public void testResolution_override_arguments_2() throws Exception {
        runTest("src/testData/box/context-receivers/resolution_override_arguments_2.kt");
    }
}
