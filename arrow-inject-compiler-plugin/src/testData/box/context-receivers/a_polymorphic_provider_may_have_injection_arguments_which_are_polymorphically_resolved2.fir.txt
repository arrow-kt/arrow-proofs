FILE: a_polymorphic_provider_may_have_injection_arguments_which_are_polymorphically_resolved2.kt
    package foo.bar

    @R|arrow/inject/annotations/Provider|() internal final fun intProvider(): R|kotlin/Int| {
        ^intProvider Int(42)
    }
    public final data class Foo<A> : R|kotlin/Any| {
        public constructor<A>(n: R|A|): R|foo/bar/Foo<A>| {
            super<R|kotlin/Any|>()
        }

        public final val n: R|A| = R|<local>/n|
            public get(): R|A|

        public final operator fun component1(): R|A|

        public final fun copy(n: R|A| = this@R|foo/bar/Foo|.R|foo/bar/Foo.n|): R|foo/bar/Foo<A>|

    }
    context(R|A|)
    @R|arrow/inject/annotations/Provider|() internal final fun <A> fooProvider(): R|foo/bar/Foo<A>| {
        ^fooProvider R|foo/bar/Foo.Foo|<R|A|>(this@R|foo/bar/fooProvider|)
    }
    public final fun f2(): R|kotlin/Int| {
        R|kotlin/io/println|(String(will drop from nested body))
        ^f2 R|arrow/inject/annotations/contextual|<R|kotlin/Int|, R|kotlin/Int|>(R|foo/bar/intProvider|(), <L> = contextual@fun R|kotlin/Int|.<anonymous>(): R|kotlin/Int| <inline=Inline, kind=UNKNOWN>  {
            ^ R|arrow/inject/annotations/contextual|<R|foo/bar/Foo<kotlin/Int>|, R|kotlin/Int|>(R|foo/bar/fooProvider|<R|kotlin/Int|>(), <L> = contextual@fun R|foo/bar/Foo<kotlin/Int>|.<anonymous>(): R|kotlin/Int| <inline=Inline, kind=UNKNOWN>  {
                ^ this@R|special/anonymous|.R|SubstitutionOverride<foo/bar/Foo.n: R|kotlin/Int|>|
            }
            )
        }
        )
    }
    public final fun box(): R|kotlin/String| {
        lval n: R|kotlin/Int| = R|foo/bar/f2|()
        ^box when () {
            ==(R|<local>/n|, Int(42)) ->  {
                String(OK)
            }
            else ->  {
                String(Fail)
            }
        }

    }
