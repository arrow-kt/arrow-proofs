FILE: resolution_override_arguments_2.kt
    package foo.bar

    public abstract interface A : R|kotlin/Any| {
        public abstract val z: R|kotlin/Int|
            public get(): R|kotlin/Int|

    }
    @R|arrow/inject/annotations/Contextual|() public final class DefaultA : R|foo/bar/A| {
        public constructor(): R|foo/bar/DefaultA| {
            super<R|kotlin/Any|>()
        }

        public final override val z: R|kotlin/Int| = Int(0)
            public get(): R|kotlin/Int|

    }
    public final class OverrideA : R|foo/bar/A| {
        public constructor(): R|foo/bar/OverrideA| {
            super<R|kotlin/Any|>()
        }

        public final override val z: R|kotlin/Int| = Int(1)
            public get(): R|kotlin/Int|

    }
    context(R|foo/bar/A|)
    @R|arrow/inject/annotations/Contextual|() public final class B : R|kotlin/Any| {
        public constructor(): R|foo/bar/B| {
            super<R|kotlin/Any|>()
        }

        public final val y: R|kotlin/Int| = this@R|foo/bar/B|.R|foo/bar/A.z|
            public get(): R|kotlin/Int|

    }
    context(R|foo/bar/B|)
    public final class C : R|kotlin/Any| {
        public constructor(): R|foo/bar/C| {
            super<R|kotlin/Any|>()
        }

        public final val x: R|kotlin/Int| = this@R|foo/bar/C|.R|foo/bar/B.y|
            public get(): R|kotlin/Int|

    }
    context(R|foo/bar/B|)
    public final fun f2(): R|kotlin/Int| {
        ^f2 R|foo/bar/C.C|().R|foo/bar/C.x|
    }
    @R|arrow/inject/annotations/ContextResolved|() public final fun f2(a: R|foo/bar/A| = R|foo/bar/DefaultA.DefaultA|(), b: R|foo/bar/B| = R|arrow/inject/annotations/contextual|<R|foo/bar/A|, R|foo/bar/B|>(R|<local>/a|, <L> = contextual@fun R|foo/bar/A|.<anonymous>(): R|foo/bar/B| <inline=Inline, kind=EXACTLY_ONCE>  {
        ^ R|foo/bar/B.B|()
    }
    )): R|kotlin/Int| {
        ^f2 R|arrow/inject/annotations/contextual|<R|foo/bar/B|, R|kotlin/Int|>(R|<local>/b|, <L> = contextual@fun R|foo/bar/B|.<anonymous>(): R|kotlin/Int| <inline=Inline, kind=EXACTLY_ONCE>  {
            ^ R|foo/bar/f2|()
        }
        )
    }
    public final fun box(): R|kotlin/String| {
        lval result: R|kotlin/Int| = R|foo/bar/f2|(a = R|foo/bar/OverrideA.OverrideA|())
        ^box when () {
            ==(R|<local>/result|, Int(1)) ->  {
                String(OK)
            }
            else ->  {
                <strcat>(String(Fail: ), R|<local>/result|)
            }
        }

    }
